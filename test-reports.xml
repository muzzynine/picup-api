{"name":"DatabaseConnectLogger","hostname":"muzzynine.local","pid":26486,"level":30,"msg":"index#Database(RDBMS)/(NOSQL) connected","time":"2016-03-19T13:13:38.590Z","v":0}
{"name":"DatabaseConnectLogger","hostname":"muzzynine.local","pid":26486,"level":30,"msg":"index#Database(RDBMS) association set completed","time":"2016-03-19T13:13:38.630Z","v":0}
{"name":"DatabaseConnectLogger","hostname":"muzzynine.local","pid":26486,"level":30,"msg":"index#Database sync now","time":"2016-03-19T13:13:38.633Z","v":0}
192.168.123.100
{"name":"AMQPLogger","hostname":"muzzynine.local","pid":26486,"level":30,"msg":"amqp connected successfully","time":"2016-03-19T13:13:38.879Z","v":0}
<testsuite name="Mocha Tests" tests="65" failures="0" errors="0" skipped="0" timestamp="Sat, 19 Mar 2016 13:13:52 GMT" time="14.076">
<testcase classname="Startup - ready for start server #getIpAddrV4" name="It works for me" time="0.001"/>
<testcase classname="groupController - businessLogic for group job #createGroup - Create new group" name="It works for me" time="0.132"/>
<testcase classname="groupController - businessLogic for group job #updateGroupName - group name change" name="It works for me" time="0.049"/>
<testcase classname="groupController - businessLogic for group job #commitInternal - commit new delta for group" name="It works for me. Init commit (0 -&gt; 1)" time="0.25"/>
<testcase classname="groupController - businessLogic for group job #commitInternal - commit new delta for group" name="It works for me. long commit (0 -&gt; 2)" time="0.323"/>
<testcase classname="groupController - businessLogic for group job #update - get between src to dst delta for update" name="pass wrong argument(src revision is wrong)" time="0.002"/>
<testcase classname="groupController - businessLogic for group job #update - get between src to dst delta for update" name="pass wrong argument(dst revision is wrong)" time="0.001"/>
<testcase classname="groupController - businessLogic for group job #update - get between src to dst delta for update" name="pass wrong argument(src &gt; dst)" time="0.001"/>
<testcase classname="groupController - businessLogic for group job #update - get between src to dst delta for update" name="It works for me(0 -&gt; 1 update)" time="0.384"/>
<testcase classname="groupController - businessLogic for group job #update - get between src to dst delta for update" name="It works for me(0 -&gt; 2 update)" time="0.453"/>
<testcase classname="awsS3 - aws s3 #checkExistNodeObject" name="It works for me" time="0.519"/>
<testcase classname="awsS3 - aws s3 #checkExistNodeObject" name="not exist object" time="0.389"/>
<testcase classname="awsS3 - aws s3 #checkExistThumbObject" name="It works for me" time="0.382"/>
<testcase classname="awsS3 - aws s3 #checkExistThumbObject" name="not exist object" time="0.35"/>
<testcase classname="awsS3 - aws s3 #checkExistNodeObjectsBatch" name="It works for me" time="0.507"/>
<testcase classname="awsS3 - aws s3 #checkExistNodeObjectsBatch" name="node's presence 'delete' case" time="0.001"/>
<testcase classname="awsS3 - aws s3 #checkExistNodeObjectsBatch" name="node's s3Path 'default' case" time="0.001"/>
<testcase classname="awsS3 - aws s3 #checkExistNodeObjectsBatch" name="node's s3Path undefined or null case" time="0.001"/>
<testcase classname="awsS3 - aws s3 #checkExistThumbObjectsBatch" name="It works for me" time="0.387"/>
<testcase classname="awsS3 - aws s3 #checkExistThumbObjectsBatch" name="node's presence 'delete' case" time="0.001"/>
<testcase classname="awsS3 - aws s3 #checkExistThumbObjectsBatch" name="node's s3Path 'default' case" time="0.001"/>
<testcase classname="Sync - syncronization module #isBoundary" name="1 revision calculate" time="0.002"/>
<testcase classname="Sync - syncronization module #isBoundary" name="another short prune revision calculate" time="0"/>
<testcase classname="Sync - syncronization module #isBoundary" name="zero revision caclulate" time="0"/>
<testcase classname="Sync - syncronization module #isBoundary" name="another far prune revision calculate" time="0"/>
<testcase classname="Sync - syncronization module #getForwardRevision" name="1 revision calculate" time="0.001"/>
<testcase classname="Sync - syncronization module #getForwardRevision" name="another prune calculate" time="0"/>
<testcase classname="Sync - syncronization module #getForwardRevision" name="zero revision calculate" time="0"/>
<testcase classname="Sync - syncronization module #getRightmostToZero" name="good case test" time="0"/>
<testcase classname="Sync - syncronization module #getSkipDeltaNumber" name="diff 1 delta number" time="0"/>
<testcase classname="Sync - syncronization module #getSkipDeltaNumber" name="diff &quot;to zero&quot; delta number" time="0.001"/>
<testcase classname="Sync - syncronization module #getSkipDeltaNumber" name="diff middle delta number" time="0"/>
<testcase classname="Sync - syncronization module #getDeltaList" name="traverse short delta list" time="0"/>
<testcase classname="Sync - syncronization module #getDeltaList" name="traverse middle delta list(no include 0 rev)" time="0.001"/>
<testcase classname="Sync - syncronization module #getDeltaList" name="traverse long delta list(include 0 rev)" time="0"/>
<testcase classname="Sync - syncronization module #getDeltaList" name="traverse 0 start delta list" time="0"/>
<testcase classname="Sync - syncronization module #S3PathGenerator" name="good test case - file" time="0"/>
<testcase classname="Sync - syncronization module #S3PathGenerator" name="good test case - dir" time="0"/>
<testcase classname="Sync - syncronization module #S3PathSeparator" name="good test case" time="0"/>
<testcase classname="Node - node dao(contain meta, delta) #generateNodeInfo" name="good test case" time="0.001"/>
<testcase classname="Node - node dao(contain meta, delta) Node#incrementRevi22sion" name="It works for me" time="0"/>
<testcase classname="Node - node dao(contain meta, delta) #addNodeBatch" name="It works for me(node size 100)" time="0.196"/>
<testcase classname="Node - node dao(contain meta, delta) #addNodeBatch" name="It works for me(node size &gt; 100" time="0.264"/>
<testcase classname="Node - node dao(contain meta, delta) #replaceNodeBatch" name="It works for me (New revision delta add)" time="0.243"/>
<testcase classname="Node - node dao(contain meta, delta) #replaceNodeBatch" name="It works for me(If same revision, Upsert)" time="0.235"/>
<testcase classname="Node - node dao(contain meta, delta) #getAliveNodes3" name="It works for me" time="0.052"/>
<testcase classname="Node - node dao(contain meta, delta) #saveNodeBatch" name="It works for me" time="0.431"/>
<testcase classname="NodeDelta - node delta dao #getLatestNodeDelta" name="it works for me" time="0.043"/>
<testcase classname="NodeDelta - node delta dao #getLatestNodeDelta" name="not exist node delta(not exist nid)" time="0.039"/>
<testcase classname="NodeDelta - node delta dao #getLatestNodeDeltaBatch" name="it works for me" time="1.629"/>
<testcase classname="NodeDelta - node delta dao #getNodeDeltaByNidAndRev" name="it works for me" time="0.042"/>
<testcase classname="NodeDelta - node delta dao #getNodeDeltaByNidAndRev" name="not exist node delta(not exist nid)" time="0.039"/>
<testcase classname="NodeDelta - node delta dao #getNodeDeltaByNidAndRev" name="not exist node delta(not exist revision)" time="0.044"/>
<testcase classname="NodeDelta - node delta dao #getNodeDeltaByBetweenRev" name="It works for me" time="0.155"/>
<testcase classname="NodeDelta - node delta dao #getNodeDeltaByBetweenRev" name="not exist node delta(find by nid)" time="0.06"/>
<testcase classname="NodeDelta - node delta dao #getNodeDeltaByBetweenRev" name="not exist node delta between src to dst" time="0.055"/>
<testcase classname="NodeDelta - node delta dao #getNodeDeltaByBetweenRevBatch" name="It works for me" time="1.465"/>
<testcase classname="NodeDelta - node delta dao #getNodeDeltaByBetweenRevBatch" name="1 nodes not exist" time="1.177"/>
<testcase classname="NodeDelta - node delta dao #addNodeDeltaBatch" name="It works for me" time="0.072"/>
<testcase classname="NodeDelta - node delta dao #addNodeDeltaBatch" name="Upsert well done" time="0.159"/>
<testcase classname="NodeMeta - node's meta infomation dao #findNodeById" name="it works for me" time="0.045"/>
<testcase classname="NodeMeta - node's meta infomation dao #findNodeByIdBatch" name="it works for me" time="0.058"/>
<testcase classname="NodeMeta - node's meta infomation dao #getNodeMetaByGidAndRelPath" name="it works for me" time="0.045"/>
<testcase classname="NodeMeta - node's meta infomation dao #getNodeMetaByGidAndRelPathBatch" name="it works for me" time="0.675"/>
<testcase classname="NodeMeta - node's meta infomation dao #addNodeMetaBatch" name="it works for me" time="0.076"/>
</testsuite>
